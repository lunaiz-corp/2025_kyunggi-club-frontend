name: Deploy Admin with Docker Container

on:
  push:
    paths:
      - "apps/admin/**"
    branches:
      - main
  workflow_dispatch:
  workflow_call:

jobs:
  build-nextjs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Install Dependencies
        working-directory: ./apps/admin
        run: pnpm install --frozen-lockfile

      - name: Build project
        working-directory: ./apps/admin
        env:
          NEXT_PUBLIC_CDN_URL: https://kg-cdn-toast.schooler.kr/admin
          NEXT_PUBLIC_API_URL: https://api.kyunggi.club
        run: pnpm run build

      - name: Upload built result
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build-admin-${{ github.sha }}
          retention-days: 5
          include-hidden-files: true
          path: |
            apps/admin/.next/standalone
            apps/admin/.next/static

  cdn-push:
    needs: [build-nextjs]
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Get current frontend version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: apps/admin

      - name: Download Next.js built result
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build-admin-${{ github.sha }}
          path: apps/admin/.next

      - name: Upload static files with Toast CDN (S3-compatible)
        uses: docker://amazon/aws-cli:2.22.35
        env:
          S3_BUCKET: kg-schooler-public-20250302

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          AWS_ENDPOINT_URL: https://kr1-api-object-storage.nhncloudservice.com
          AWS_DEFAULT_REGION: "KR1"
          AWS_REGION: "KR1"
        with:
          args: s3 cp ./apps/admin/.next/static/ s3://${{ env.S3_BUCKET }}/admin/${{ steps.package-version.outputs.current-version }}/_next/static --recursive

  docker-push:
    needs: [build-nextjs]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    env:
      IMAGE_NAME: 2025_kyunggi-club-admin

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Download Next.js built result
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build-admin-${{ github.sha }}
          path: apps/admin/.next

      - name: Build image
        run: docker build apps/admin --file apps/admin/Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker-deploy:
    needs: [docker-push]
    runs-on: ubuntu-latest

    permissions:
      contents: read

    env:
      TOAST_NCS_WORKLOAD_ID: 94a9545e-e21b-434b-807e-57853d68c034

    steps:
      - name: Get Toast Cloud Token
        id: authorize-toast
        run: |
          response=$(curl -s -X POST https://oauth.api.nhncloudservice.com/oauth2/token/create \
            -u "${{ secrets.TOAST_ACCESS_KEY_ID }}:${{ secrets.TOAST_SECRET_ACCESS_KEY }}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials")

          access_token=$(echo "$response" | jq -r '.access_token')

          if [ -n "$access_token" ] && [ "$access_token" != "null" ]; then
            echo "TOAST_ACCESS_TOKEN=$access_token" >> $GITHUB_OUTPUT
            echo "✅ Access token retrieved and stored in environment."
          else
            echo "❌ Failed to retrieve access token."
            exit 1
          fi

      - name: Stop previous Toast NCS deployment
        run: |
          curl -X POST https://kr1-ncs.api.nhncloudservice.com/ncs/v1.0/appkeys/${{ secrets.TOAST_NCS_API_KEY }}/workloads/${{ env.TOAST_NCS_WORKLOAD_ID }}/pause \
            -H "x-nhn-authorization: Bearer ${{ steps.authorize-toast.outputs.TOAST_ACCESS_TOKEN }}"

      - name: Trigger Toast NCS deployment
        run: |
          curl -X POST https://kr1-ncs.api.nhncloudservice.com/ncs/v1.0/appkeys/${{ secrets.TOAST_NCS_API_KEY }}/workloads/${{ env.TOAST_NCS_WORKLOAD_ID }}/resume \
            -H "x-nhn-authorization: Bearer ${{ steps.authorize-toast.outputs.TOAST_ACCESS_TOKEN }}"

      - name: Invalidate (Revoke) used Toast Cloud Token
        run: |
          curl -X POST https://oauth.api.nhncloudservice.com/oauth2/token/revoke \
            -u "${{ secrets.TOAST_ACCESS_KEY_ID }}:${{ secrets.TOAST_SECRET_ACCESS_KEY }}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "token=${{ steps.authorize-toast.outputs.TOAST_ACCESS_TOKEN }}"
